name: Version, Changelog, and Release

on:
  push:
    branches:
      - main

jobs:
  version-changelog-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Generate version and changelog
        id: release
        run: |
          # Get the latest version from package.json
          current_version=$(node -p "require('./package.json').version || '0.1.0'")
          echo "Current version: $current_version"
          
          # Check if the current version tag exists
          if git rev-parse "v$current_version" >/dev/null 2>&1; then
            # Increment patch version since tag exists
            npm version patch
            new_version=$(node -p "require('./package.json').version")
          else
            new_version=$current_version
          fi
          
          # Run standard-version with the specific version
          npx standard-version --release-as $new_version
          
          # Store the new version and changelog
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          
          # Get changelog content
          changelog_content=$(awk '/^### \[[0-9]+\.[0-9]+\.[0-9]+\]/{p=NR+1}(NR>=p){print}' CHANGELOG.md | sed '/^### \[[0-9]+\.[0-9]+\.[0-9]+\]/q' | head -n -1)
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          changelog_content="${{ steps.release.outputs.changelog_content }}"
          gh release create "v${{ steps.release.outputs.new_version }}" \
            --title "Release v${{ steps.release.outputs.new_version }}" \
            --notes "$changelog_content" \
            --target ${{ github.ref_name }}